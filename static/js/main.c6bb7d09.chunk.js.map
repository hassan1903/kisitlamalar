{"version":3,"sources":["getDataFromMinistry.js","index.js"],"names":["getRegionCode","require","_ref3","Object","asyncToGenerator","regenerator_default","a","mark","_callee3","regionCode","wrap","_context3","prev","next","fetch","mode","then","response","json","data","country","region_code","abrupt","stop","apply","this","arguments","TabPane","Tabs","LightBulb","_useState","useState","_useState2","slicedToArray","light","setLight","_useState3","_useState4","setRegionCode","_useState5","_useState6","spinning","setSpinning","_useState7","assign","JSON","parse","stringify","citiesList","_useState8","cityList","_useState9","nextCitiesList","_useState10","estimatedCityList","_useState11","value","label","status","_useState12","selectedCity","setSelectedCity","_useState13","_useState14","selectedEstimatedCity","setSelectedEstimatedCity","ruleId","ruleIdTab2","colorCode","key","fillColor","find","element","useEffect","_callee","newRegionCode","_context","sent","currentLocation","cities","parseInt","currentEstimatedLocation","react_default","createElement","className","tabs","defaultActiveKey","onChange","cityStatus","item","tab","moment","locale","format","style","paddingTop","paddingBottom","textAlign","src_LightbulbSvg","es_select","showSearch","width","placeholder","val","options","undefined","optionFilterProp","filterOption","input","option","toLocaleUpperCase","indexOf","color","spin","size","ruleList","rules","map","el","icon","href","src_TwitterIcon","LightbulbSvg","props","height","viewBox","version","id","stroke","strokeWidth","fill","fillRule","d","TwitterIcon","xmlns","x","y","rootElement","document","getElementById","ReactDOM","render","src_LightBulb"],"mappings":"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","file":"static/js/main.c6bb7d09.chunk.js","sourcesContent":["const cheerio = require(\"cheerio\");\r\n\r\nconst updateData = async (cityList) => {\r\n  let newCityList = { ...cityList };\r\n  await fetch(\"https://covid19.saglik.gov.tr/?lang=tr-TR\", {\r\n    mode: \"cors\",\r\n  })\r\n    .then((response) => response.text())\r\n    .then((data) => {\r\n      const $ = cheerio.load(data);\r\n      cityList.cities.forEach((element, index) => {\r\n        const city = $(\"[data-adi=\" + element.label + \"]\").get(1);\r\n        if (city && city.attribs && city.attribs.id) {\r\n          const color = city.attribs.id;\r\n          newCityList.cities[index].status = parseInt(\r\n            color.replace(\"color_\", \"\"),\r\n            10\r\n          );\r\n        }\r\n      });\r\n    });\r\n  return newCityList;\r\n};\r\n\r\nexport const updateEstimatedData = async (cityEstimatedList) => {\r\n  let newCityListEstimated = { ...cityEstimatedList };\r\n  await fetch(\"https://covid19.saglik.gov.tr/?lang=tr-TR\", {\r\n    mode: \"cors\",\r\n  })\r\n    .then((response) => response.text())\r\n    .then((data) => {\r\n      const $ = cheerio.load(data);\r\n      cityEstimatedList.cities.forEach((element, index) => {\r\n        const city = $(\"[data-adi=\" + element.label + \"]\").get(0);\r\n        if (city && city.attribs && city.attribs[\"data-detay\"]) {\r\n          const numberOfPatient = parseInt(city.attribs[\"data-detay\"], 10);\r\n          let color = newCityListEstimated.cities[index].status;\r\n          switch (true) {\r\n            case numberOfPatient >= 0 && numberOfPatient < 20:\r\n              color = 1;\r\n              break;\r\n            case numberOfPatient >= 20 && numberOfPatient < 50:\r\n              color = 2;\r\n              break;\r\n            case numberOfPatient >= 50 && numberOfPatient < 100:\r\n              color = 3;\r\n              break;\r\n            case numberOfPatient >= 100:\r\n              color = 4;\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          newCityListEstimated.cities[index].status = color;\r\n        }\r\n      });\r\n    });\r\n  return newCityListEstimated;\r\n};\r\n\r\nexport const getRegionCode = async () => {\r\n  let regionCode;\r\n  await fetch(\"https://ipapi.co/json/\", {\r\n    mode: \"cors\",\r\n  })\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      if (data && data.country === \"TR\" && data.region_code) {\r\n        regionCode = data.region_code;\r\n      }\r\n    });\r\n  return regionCode;\r\n};\r\n\r\nexport default updateData;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Tabs, Select, Spin } from \"antd\";\r\nimport citiesList from \"./city.json\";\r\nimport nextCitiesList from \"./estimated.json\";\r\nimport ruleList from \"./rules.json\";\r\nimport updateData, {\r\n  updateEstimatedData,\r\n  getRegionCode,\r\n} from \"./getDataFromMinistry.js\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/tr\";\r\nimport \"./styles.css\";\r\nconst { TabPane } = Tabs;\r\nconst LightBulb = () => {\r\n  const [light, setLight] = useState(0);\r\n  const [regionCode, setRegionCode] = useState(0);\r\n  const [spinning, setSpinning] = useState(true);\r\n  const [cityList, setCityList] = useState(\r\n    Object.assign({}, JSON.parse(JSON.stringify(citiesList)))\r\n  );\r\n  const [estimatedCityList, setEstimatedCityList] = useState(\r\n    Object.assign({}, JSON.parse(JSON.stringify(nextCitiesList)))\r\n  );\r\n  const [selectedCity, setSelectedCity] = useState({\r\n    value: -1,\r\n    label: \"\",\r\n    status: -1,\r\n  });\r\n  const [selectedEstimatedCity, setSelectedEstimatedCity] = useState({\r\n    value: -1,\r\n    label: \"\",\r\n    status: -1,\r\n  });\r\n  let ruleId = 1;\r\n  let ruleIdTab2 = 1;\r\n\r\n  const colorCode = [\r\n    {\r\n      key: 1,\r\n      value: \"#0071c1\",\r\n      label: \"Düşük riskli bölge\",\r\n    },\r\n    { key: 2, value: \"#f0e513\", label: \"Orta riskli bölge\" },\r\n    { key: 3, value: \"#f8931f\", label: \"Yüksek riskli bölge\" },\r\n    { key: 4, value: \"#df1a23\", label: \"Çok yüksek riskli bölge\" },\r\n  ];\r\n  const fillColor = colorCode.find((element) => element.key === light);\r\n  useEffect(async () => {\r\n    //const newEstimatedCityList = await updateEstimatedData(estimatedCityList);\r\n    //const newCityList = await updateData(cityList);\r\n    const newRegionCode = await getRegionCode();\r\n    //setCityList(newCityList);\r\n    //setEstimatedCityList(newEstimatedCityList);\r\n    setRegionCode(newRegionCode);\r\n    setSpinning(false);\r\n  }, []);\r\n  useEffect(() => {\r\n    if (regionCode) {\r\n      const currentLocation = cityList.cities.find(\r\n        (element) => element.value === parseInt(regionCode, 10)\r\n      );\r\n      const currentEstimatedLocation = estimatedCityList.cities.find(\r\n        (element) => element.value === parseInt(regionCode, 10)\r\n      );\r\n      setSelectedCity(currentLocation);\r\n      setSelectedEstimatedCity(currentEstimatedLocation);\r\n      setLight(currentLocation.status);\r\n    }\r\n  }, [regionCode]);\r\n  return (\r\n    <div className=\"App\">\r\n      <Tabs\r\n        defaultActiveKey=\"1\"\r\n        onChange={(key) => {\r\n          if (key === \"2\") {\r\n            const cityStatus = estimatedCityList.cities.find(\r\n              (item) => item.label === selectedEstimatedCity.label\r\n            );\r\n            setLight(cityStatus.status);\r\n            setSelectedEstimatedCity(cityStatus);\r\n          } else {\r\n            const cityStatus = cityList.cities.find(\r\n              (item) => item.label === selectedCity.label\r\n            );\r\n            setLight(cityStatus.status);\r\n            setSelectedCity(cityStatus);\r\n          }\r\n        }}\r\n      >\r\n        <TabPane tab=\"Geçerli kısıtlamalar\" key=\"1\">\r\n          <h4 className=\"title\">\r\n            {moment()\r\n              .locale(\"tr\")\r\n              .format(\"LL\") + \" tarihi illere göre güncel kısıtlama kuralları\"}\r\n          </h4>\r\n          <div\r\n            style={{ paddingTop: 20, paddingBottom: 50, textAlign: \"center\" }}\r\n          >\r\n            <LightbulbSvg fillColor={fillColor ? fillColor.value : \"#000\"} />\r\n          </div>\r\n          <div className=\"container\">\r\n            <Select\r\n              showSearch\r\n              style={{ width: \"100%\" }}\r\n              placeholder=\"Şehir Seçiniz\"\r\n              onChange={(val) => {\r\n                const cityStatus = cityList.cities.find(\r\n                  (item) => item.value === val\r\n                );\r\n                setLight(cityStatus.status);\r\n                setSelectedCity(cityStatus);\r\n              }}\r\n              options={cityList.cities}\r\n              value={selectedCity.value > 0 ? selectedCity.value : undefined}\r\n              optionFilterProp=\"children\"\r\n              filterOption={(input, option) =>\r\n                option.label\r\n                  .toLocaleUpperCase(\"tr-TR\")\r\n                  .indexOf(input.toLocaleUpperCase(\"tr-TR\")) >= 0\r\n              }\r\n            />\r\n            {light !== 0 && selectedCity ? (\r\n              <h2\r\n                className=\"title\"\r\n                style={{ color: colorCode[light - 1].value }}\r\n              >\r\n                {colorCode[light - 1].label}\r\n              </h2>\r\n            ) : null}\r\n            <div className={spinning ? \"loader\" : \"loader-hide\"}>\r\n              <Spin spinning={spinning} size=\"large\" />\r\n            </div>\r\n            {light !== 0 ? (\r\n              <ul>\r\n                {ruleList.rules.map((el) => {\r\n                  if (el.ruleId === ruleId) {\r\n                    const index = el.status.indexOf(light);\r\n                    if (index > -1) {\r\n                      ruleId++;\r\n                      return (\r\n                        <li\r\n                          key={\"tab1\" + ruleId}\r\n                          style={{ paddingBottom: 10 }}\r\n                          className={\"rule-item-\" + el.icon}\r\n                        >\r\n                          {el.label}\r\n                        </li>\r\n                      );\r\n                    }\r\n                    return null;\r\n                  }\r\n                  return null;\r\n                })}\r\n              </ul>\r\n            ) : null}\r\n            {light !== 0 && selectedCity ? (\r\n              <div className=\"footercontainer\">\r\n                <h5 className=\"titleH5WithoutPadding\">\r\n                  {\r\n                    \"Bilgilendirme amaçlıdır, gerçeği yansıtmayabilir, sorumluluk kabul edilmez.\"\r\n                  }\r\n                </h5>\r\n                <a\r\n                  href=\"https://twitter.com/intent/tweet?text=Ya%C5%9Fad%C4%B1%C4%9F%C4%B1m%20%C5%9Fehrin%20risk%20grubunu%20ve%20ge%C3%A7erli%20olan%20k%C4%B1s%C4%B1tlamalar%C4%B1%20%C3%B6%C4%9Frendim.%20Sende%20%C3%B6%C4%9Frenmek%20istiyorsan%3B&url=https%3A%2F%2Fhassan1903.github.io%2Fkisitlamalar\"\r\n                  className=\"tweetbutton\"\r\n                >\r\n                  <TwitterIcon />\r\n                  <span className=\"tweetlabel\">Tweet</span>\r\n                </a>\r\n                <h5 className=\"titleH5\">\r\n                  {\"Lovely developed by Hasan Kürşat Küçüköztaş\"}\r\n                </h5>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </TabPane>\r\n        <TabPane tab=\"Vakalara göre tahmini kısıtlamalar\" key=\"2\">\r\n          <h4 className=\"title\">\r\n            {moment()\r\n              .locale(\"tr\")\r\n              .format(\"LL\") + \" tarihi illere göre tahmini kısıtlama kuralları\"}\r\n          </h4>\r\n          <div\r\n            style={{ paddingTop: 20, paddingBottom: 50, textAlign: \"center\" }}\r\n          >\r\n            <LightbulbSvg fillColor={fillColor ? fillColor.value : \"#000\"} />\r\n          </div>\r\n          <div className=\"container\">\r\n            <Select\r\n              showSearch\r\n              style={{ width: \"100%\" }}\r\n              placeholder=\"Şehir Seçiniz\"\r\n              onChange={(val) => {\r\n                const cityStatus = estimatedCityList.cities.find(\r\n                  (item) => item.value === val\r\n                );\r\n                setLight(cityStatus.status);\r\n                setSelectedEstimatedCity(cityStatus);\r\n              }}\r\n              options={estimatedCityList.cities}\r\n              value={\r\n                selectedEstimatedCity.value > 0\r\n                  ? selectedEstimatedCity.value\r\n                  : undefined\r\n              }\r\n              optionFilterProp=\"children\"\r\n              filterOption={(input, option) =>\r\n                option.label\r\n                  .toLocaleUpperCase(\"tr-TR\")\r\n                  .indexOf(input.toLocaleUpperCase(\"tr-TR\")) >= 0\r\n              }\r\n            />\r\n            {light !== 0 && selectedEstimatedCity ? (\r\n              <h2\r\n                className=\"title\"\r\n                style={{ color: colorCode[light - 1].value }}\r\n              >\r\n                {colorCode[light - 1].label}\r\n              </h2>\r\n            ) : null}\r\n            {light !== 0 ? (\r\n              <ul>\r\n                {ruleList.rules.map((el) => {\r\n                  if (el.ruleId === ruleIdTab2) {\r\n                    const index = el.status.indexOf(light);\r\n                    if (index > -1) {\r\n                      ruleIdTab2++;\r\n                      return (\r\n                        <li\r\n                          key={\"tab2\" + ruleIdTab2}\r\n                          style={{ paddingBottom: 10 }}\r\n                          className={\"rule-item-\" + el.icon}\r\n                        >\r\n                          {el.label}\r\n                        </li>\r\n                      );\r\n                    }\r\n                    return null;\r\n                  }\r\n                  return null;\r\n                })}\r\n              </ul>\r\n            ) : null}\r\n            {light !== 0 && selectedEstimatedCity ? (\r\n              <div className=\"footercontainer\">\r\n                <h5 className=\"titleH5WithoutPadding\">\r\n                  {\r\n                    \"Bilgilendirme amaçlıdır, gerçeği yansıtmayabilir, sorumluluk kabul edilmez.\"\r\n                  }\r\n                </h5>\r\n                <a\r\n                  href=\"https://twitter.com/intent/tweet?text=Ya%C5%9Fad%C4%B1%C4%9F%C4%B1m%20%C5%9Fehrin%20risk%20grubunu%20ve%20ge%C3%A7erli%20olan%20k%C4%B1s%C4%B1tlamalar%C4%B1%20%C3%B6%C4%9Frendim.%20Sende%20%C3%B6%C4%9Frenmek%20istiyorsan%3B&url=https%3A%2F%2Fhassan1903.github.io%2Fkisitlamalar\"\r\n                  className=\"tweetbutton\"\r\n                >\r\n                  <TwitterIcon />\r\n                  <span className=\"tweetlabel\">Tweet</span>\r\n                </a>\r\n                <h5 className=\"titleH5\">\r\n                  {\"Lovely developed by Hasan Kürşat Küçüköztaş\"}\r\n                </h5>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LightbulbSvg = (props) => {\r\n  return (\r\n    <svg width=\"56px\" height=\"90px\" viewBox=\"0 0 56 90\" version=\"1.1\">\r\n      <defs />\r\n      <g\r\n        id=\"Page-1\"\r\n        stroke=\"none\"\r\n        strokeWidth=\"1\"\r\n        fill=\"none\"\r\n        fillRule=\"evenodd\"\r\n      >\r\n        <g id=\"noun_bulb_1912567\" fill=\"#000000\" fillRule=\"nonzero\">\r\n          <path\r\n            d=\"M38.985,68.873 L17.015,68.873 C15.615,68.873 14.48,70.009 14.48,71.409 C14.48,72.809 15.615,73.944 17.015,73.944 L38.986,73.944 C40.386,73.944 41.521,72.809 41.521,71.409 C41.521,70.009 40.386,68.873 38.985,68.873 Z\"\r\n            id=\"Shape\"\r\n          />\r\n          <path\r\n            d=\"M41.521,78.592 C41.521,77.192 40.386,76.057 38.986,76.057 L17.015,76.057 C15.615,76.057 14.48,77.192 14.48,78.592 C14.48,79.993 15.615,81.128 17.015,81.128 L38.986,81.128 C40.386,81.127 41.521,79.993 41.521,78.592 Z\"\r\n            id=\"Shape\"\r\n          />\r\n          <path\r\n            d=\"M18.282,83.24 C17.114,83.24 16.793,83.952 17.559,84.83 L21.806,89.682 C21.961,89.858 22.273,90 22.508,90 L33.492,90 C33.726,90 34.039,89.858 34.193,89.682 L38.44,84.83 C39.207,83.952 38.885,83.24 37.717,83.24 L18.282,83.24 Z\"\r\n            id=\"Shape\"\r\n          />\r\n          <path\r\n            d=\"M16.857,66.322 L39.142,66.322 C40.541,66.322 41.784,65.19 42.04,63.814 C44.63,49.959 55.886,41.575 55.886,27.887 C55.887,12.485 43.401,0 28,0 C12.599,0 0.113,12.485 0.113,27.887 C0.113,41.575 11.369,49.958 13.959,63.814 C14.216,65.19 15.458,66.322 16.857,66.322 Z\"\r\n            id=\"Shape\"\r\n            fill={props.fillColor}\r\n          />\r\n        </g>\r\n      </g>\r\n    </svg>\r\n  );\r\n};\r\n\r\nconst TwitterIcon = (props) => {\r\n  return (\r\n    <svg\r\n      version=\"1.1\"\r\n      id=\"Logo\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      x=\"0px\"\r\n      y=\"0px\"\r\n      width=\"14.88px\"\r\n      height=\"12.24px\"\r\n      viewBox=\"0 0 248 204\"\r\n    >\r\n      <g id=\"Logo_1_\">\r\n        <path\r\n          id=\"blue_background\"\r\n          fill={props.fillColor ? props.fillColor : \"#fff\"}\r\n          d=\"M221.95,51.29c0.15,2.17,0.15,4.34,0.15,6.53c0,66.73-50.8,143.69-143.69,143.69v-0.04\r\n\t\tC50.97,201.51,24.1,193.65,1,178.83c3.99,0.48,8,0.72,12.02,0.73c22.74,0.02,44.83-7.61,62.72-21.66\r\n\t\tc-21.61-0.41-40.56-14.5-47.18-35.07c7.57,1.46,15.37,1.16,22.8-0.87C27.8,117.2,10.85,96.5,10.85,72.46c0-0.22,0-0.43,0-0.64\r\n\t\tc7.02,3.91,14.88,6.08,22.92,6.32C11.58,63.31,4.74,33.79,18.14,10.71c25.64,31.55,63.47,50.73,104.08,52.76\r\n\t\tc-4.07-17.54,1.49-35.92,14.61-48.25c20.34-19.12,52.33-18.14,71.45,2.19c11.31-2.23,22.15-6.38,32.07-12.26\r\n\t\tc-3.77,11.69-11.66,21.62-22.2,27.93c10.01-1.18,19.79-3.86,29-7.95C240.37,35.29,231.83,44.14,221.95,51.29z\"\r\n        />\r\n      </g>\r\n    </svg>\r\n  );\r\n};\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<LightBulb />, rootElement);\r\n"],"sourceRoot":""}